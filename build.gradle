apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'tomcat'
apply plugin: 'war'
apply plugin: 'cloudfoundry'

version = 1.0

// versioning build artifacts
def major = '1'
def minor = "${System.env.TRAVIS_BUILD_NUMBER}"
minor = (minor != 'null') ? minor : '0'
def artifact_version = major + '.' + minor

def currentJvm = org.gradle.internal.jvm.Jvm.current()

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'spring-music'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.5'
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.1'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Spring and dependencies
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    // Spring Cloud
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudVersion}"

    // Spring Data
    compile 'org.springframework.data:spring-data-jpa:1.5.2.RELEASE'
    compile 'org.springframework.data:spring-data-redis:1.4.2.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: '1.9.2.RELEASE'

    // JPA Persistence
    compile 'commons-dbcp:commons-dbcp:1.2.2'
    compile 'org.hibernate:hibernate-entitymanager:4.1.9.Final'
    runtime 'com.h2database:h2:1.3.162'
    runtime 'mysql:mysql-connector-java:5.1.25'
    runtime 'postgresql:postgresql:9.1-901-1.jdbc4'

    // Redis Persistence
    compile 'redis.clients:jedis:2.6.2'

    // JSR-303 validation
    compile 'javax.validation:validation-api:1.0.0.GA'
    compile 'org.hibernate:hibernate-validator:4.3.0.Final'

    // Webjars
    compile 'org.webjars:bootstrap:3.1.1'
    compile 'org.webjars:angularjs:1.2.16'
    compile 'org.webjars:angular-ui:0.4.0-2'
    compile 'org.webjars:angular-ui-bootstrap:0.10.0-1'
    compile 'org.webjars:jquery:2.1.0-2'

    // Jackson
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // Logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.12'

    // Servlet
    compile 'javax.servlet:jstl:1.2'
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    // Testing
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: "${springVersion}"
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    // Tomcat
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

war {
    // omit the version from the war file name
    version = ''
}

task warNoStatic(type: War) {
    // omit the version from the war file name
    version = ''
    exclude '**/assets/**'
    manifest {
        attributes   \
                'Manifest-Version': '1.0',   \
                'Created-By': currentJvm,   \
                'Gradle-Version': GradleVersion.current().version,   \
                'Implementation-Title': archivesBaseName + '.war',   \
                'Implementation-Version': artifact_version,   \
                'Implementation-Vendor': 'Gary A. Stafford'
    }
}

task warCopy(type: Copy) {
    from 'build/libs'
    into 'build/distributions'
    include '**/*.war'
}

task zipGetVersion(type: Task) {
    ext.versionfile = new File("${projectDir}/src/main/webapp/assets/buildinfo.properties")
    versionfile.text = 'build.version=' + artifact_version
}

task zipStatic(type: Zip) {
    from 'src/main/webapp/assets'
    appendix = 'static'
    version = ''
}

tomcatRun {
    outputFile = file('tomcat.log')
    tomcatRun.configFile = file('src/main/webapp/META-INF/context.xml')
}

cloudfoundry {
    target = 'https://api.run.pivotal.io'
    space = 'development'

    file = file("${war.archivePath}")
    uri = "spring-music-${randomWord}.cfapps.io"
    memory = 512
    instances = 1

    services {
        'music-mongodb' {
            label = 'mongolab'
            plan = 'sandbox'
        }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}